apply plugin: 'java-library-distribution'

dependencies {
    compile(
            'commons-cli:commons-cli:1.3.1',
            'it.sauronsoftware.cron4j:cron4j:2.2.5',

            "org.objectweb.proactive:programming-core:${programmingVersion}",
            "org.objectweb.proactive:programming-extension-pamr:${programmingVersion}",

            project(':common:common-api'),
            project(':common:common-client'),
            project(':common:common-db'),
            project(':rm:rm-client'),
            project(':rm:rm-node'),
    )

    compile 'com.google.guava:guava:19.0'

    testCompile "org.objectweb.proactive:programming-extension-pnp:${programmingVersion}"
    testCompile "org.objectweb.proactive:programming-extension-pnpssl:${programmingVersion}"
    testCompile project(':common:common-api').sourceSets.test.output

    testCompile 'org.jruby:jruby-complete:9.0.5.0'
    testCompile 'org.python:jython-standalone:2.7.0'

    testCompile 'org.apache.sshd:sshd-core:0.14.0'

    runtime 'org.hsqldb:hsqldb:2.4.0'

    runtime "org.objectweb.proactive:programming-extension-pnp:${programmingVersion}"
    runtime "org.objectweb.proactive:programming-extension-pnpssl:${programmingVersion}"
}

task('functionalTest', type: Test).configure rootProject.schedulingFunctionalTestConfiguration

task stub(type: StubTask) {
    classes = [
            'org.ow2.proactive.resourcemanager.authentication.Client',
            'org.ow2.proactive.resourcemanager.authentication.RMAuthenticationImpl',
            'org.ow2.proactive.resourcemanager.cleaning.NodesCleaner',
            'org.ow2.proactive.resourcemanager.core.RMCore',
            'org.ow2.proactive.resourcemanager.frontend.RMMonitoringImpl',
            'org.ow2.proactive.resourcemanager.nodesource.dataspace.DataSpaceNodeConfigurationAgent',
            'org.ow2.proactive.resourcemanager.nodesource.policy.CronPolicy',
            'org.ow2.proactive.resourcemanager.nodesource.policy.NodeSourcePolicy',
            'org.ow2.proactive.resourcemanager.nodesource.policy.RestartDownNodesPolicy',
            'org.ow2.proactive.resourcemanager.nodesource.policy.StaticPolicy',
            'org.ow2.proactive.resourcemanager.nodesource.policy.TimeSlotPolicy',
            'org.ow2.proactive.resourcemanager.nodesource.NodeSource',
            'org.ow2.proactive.resourcemanager.nodesource.RMNodeConfigurator',
            'org.ow2.proactive.resourcemanager.selection.statistics.ProbablisticSelectionManager',
            'org.ow2.proactive.resourcemanager.utils.ClientPinger'
    ]
}
serialver.dependsOn stub

task testJar(type: Jar) {
    classifier = 'tests'
    from sourceSets.test.output
}


task dist(type: Copy) {
    from testJar
    into file("$rootDir/dist/lib")
}

rootProject.dist.dependsOn testJar

artifacts {
    archives testJar
}

functionalTest.dependsOn rootProject.dist, dist
clean.dependsOn rootProject.cleanDist

//This task limits the maximum number of nodes by replacing the maximumNumberOfNodes variable
//inside the RmCore.class
//
// Usage: define variable maxNumberOfNodes = 10 -> will limit the number of nodes to 10
//
// When called from gradle, this task must be execute in the gradle task list like:
//gradlew build limitNumberOfNodes dist
// Because it changes a class file it must be used in the same task list. Otherwise the class file
// is recompiled -> the limitation changes are overwritten.
if (project.hasProperty('maxNumberOfNodes')) {
task limitTheMaximumNumberOfNodes(type: maxNodes.ReplaceMaxNumberOfNodesTask, dependsOn: classes) {
        print 'The maximum number of nodes will be limited, maxNumberOfNodes is set to: '
        println project.maxNumberOfNodes
        maxNumberOfNodes = project.maxNumberOfNodes
    }
    build.dependsOn limitTheMaximumNumberOfNodes
}
