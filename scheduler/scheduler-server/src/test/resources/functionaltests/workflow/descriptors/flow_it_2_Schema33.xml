<?xml version="1.0" encoding="UTF-8"?>
<job xmlns="urn:proactive:jobdescriptor:3.3" 
     xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
     xsi:schemaLocation="urn:proactive:jobdescriptor:3.3 ../../src/scheduler/src/org/ow2/proactive/scheduler/common/xml/schemas/jobdescriptor/3.3/schedulerjob.xsd"
     name="Job" priority="low" projectName="myProject" cancelJobOnError="true">

  <variables>
    <variable name="bin" value="${pa.scheduler.home}/scheduler/scheduler-server/src/test/resources/functionaltests/workflow" />
    <variable name="tmp_folder" value="${java.io.tmpdir}/" />
  </variables>

  <taskFlow>
    <task name="T" maxNumberOfExecution="4">
      <description> // <![CDATA[
      x=308,y=91
      // ]]> </description>
      <javaExecutable class="org.ow2.proactive.scheduler.examples.EmptyTask">
      </javaExecutable>
      <controlFlow block="start" >
        <replicate>
          <script>
            <code language="javascript">
// <![CDATA[
runs=2;
// ]]>
            </code>
          </script>
        </replicate>
      </controlFlow>
    </task>
    <task name="T1" maxNumberOfExecution="4">
      <description> // <![CDATA[
      x=307,y=166
      // ]]> </description>
      <depends>
        <task ref ="T" />
      </depends>
	  <nativeExecutable>
        <staticCommand value="${bin}/it.sh">
		  <arguments>
			<argument value="$tmp_folder" />
			<argument value="$PA_TASK_ITERATION" />
			<argument value="$PA_TASK_REPLICATION" />
		  </arguments>
		</staticCommand>
	  </nativeExecutable>
    </task>
    <task name="T2" maxNumberOfExecution="4">
      <description> // <![CDATA[
      x=307,y=244,a=399,b=175
      // ]]> </description>
      <depends>
        <task ref ="T1" />
      </depends>
      <javaExecutable class="org.ow2.proactive.scheduler.examples.EmptyTask">
      </javaExecutable>
      <controlFlow block="end" >
        <loop target="T">
          <script>
            <code language="groovy">
// <![CDATA[

def ID   = 3;
def RUNS = 2;
def f = new File(java.lang.System.getProperty("java.io.tmpdir"), "test_flow_lock_" + ID);
def it = 0;
if (f.exists()) {
def input = new BufferedReader(new FileReader(f));
it = java.lang.Integer.parseInt(input.readLine());
input.close();
f.delete();
}
it++;
if (it < RUNS) {
loop = true;
f.createNewFile();
def output = new BufferedWriter(new FileWriter(f));
output.write("" + it);
output.close();
} else {
loop = false;
}
// ]]>
            </code>
          </script>
        </loop>
      </controlFlow>
    </task>
  </taskFlow>
</job>
