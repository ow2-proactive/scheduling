<?xml version="1.0" encoding="UTF-8"?>
<job
		xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
		xmlns="urn:proactive:jobdescriptor:dev"
		xsi:schemaLocation="urn:proactive:jobdescriptor:dev ../../../src/org/ow2/proactive/scheduler/common/xml/schemas/jobdescriptor/dev/schedulerjob.xsd"
		name="Job_cleaning_variables"
		priority="normal"
		onTaskError="continueJobExecution"
		maxNumberOfExecution="2"
>
	<variables>
		<variable name="path" value="path_to_dir"/>
		<variable name="test" value="value_of_test"/>
		<variable name="var1" value="jobVar1"/>
		<variable name="var2" value="jobVar2"/>
		<variable name="WORKFLOW_VAR1" value="workflow_value"/>
		<variable name="WORKFLOW_VAR2" value="var2_$WORKFLOW_VAR1"/>
		<variable name="WORKFLOW_VAR3" value="workflow_value_${PA_JOB_ID}"/>
		<variable name="WORKFLOW_VAR4" value="workflow_value_${TASK_VAR1}"/>
	</variables>
	<taskFlow>
		<task name="SuccessTask">
			<description>
				<![CDATA[ The simplest task, ran by a python engine. ]]>
			</description>
			<genericInformation>
				<info name="firstTaskGI" value="generic1"/>
			</genericInformation>
			<scriptExecutable>
				<script>
					<code language="javascript">
						<![CDATA[
print("ok");
			variables.put("INHERITED_VAR1", "inherited_value")
			variables.put("INHERITED_VAR2", "inherited_value_\${PA_JOB_ID}")
			variables.put("INHERITED_VAR3", "inherited_value_\${TASK_VAR1}")
			variables.put("INHERITED_VAR4", "inherited_value_\${INHERITED_VAR1}")
]]>
					</code>
				</script>
			</scriptExecutable>
			<cleaning>
				<script>
					<code language="groovy">
						<![CDATA[
            			import org.ow2.proactive.scheduler.task.SchedulerVars
			def writeFile = {
							   path, text ->
							   	def f = new File(path)
							   	f.append("\n"+text)
							}
 			def check_defined_var = {
 			 							name, path ->
 			 								if (variables.get(name) == null)
 			 								{
 			 									writeFile(path,(name + " is not defined"))
 			 								}
 			 						}
			def check_var_equals = {
										name, value, path ->
											if (!value.equals(variables.get(name)))
											{
												writeFile(path,("Variables: " + name + " is not equal to " + variables.get(name)))
											}
									}
			def check_gi_equals = {
										name, value, path ->
										if (!value.equals(genericInformation.get(name)))
										{
										writeFile(path,("GenericInformation : " + name + " is not equal to " + variables.get(name)))
										}
								  }
			path2=variables.get("path")
			check_defined_var(SchedulerVars.PA_JOB_ID.toString(),path2)
			check_var_equals(SchedulerVars.PA_JOB_NAME.toString(), "Job_cleaning_variables",path2)
			check_defined_var(SchedulerVars.PA_TASK_ID.toString(),path2)
			check_var_equals(SchedulerVars.PA_TASK_NAME.toString(), "SuccessTask",path2)
			check_defined_var(SchedulerVars.PA_TASK_ITERATION.toString(),path2)
			check_defined_var(SchedulerVars.PA_TASK_REPLICATION.toString(),path2)
			check_defined_var(SchedulerVars.PA_USER.toString(),path2)
			check_defined_var(SchedulerVars.PA_SCHEDULER_HOME.toString(),path2)
			check_defined_var(SchedulerVars.PA_NODE_URL.toString(),path2)
			check_defined_var(SchedulerVars.PA_NODE_NAME.toString(),path2)
			check_defined_var(SchedulerVars.PA_NODE_HOST.toString(),path2)
			check_var_equals("test","initialValue",path2)
			check_gi_equals("firstTaskGI","generic1",path2)

                    	]]>
					</code>
				</script>
			</cleaning>
		</task>
		<task name="ChangeVariableTask">
			<description>
				<![CDATA[ The simplest task, ran by a python engine. ]]>
			</description>
			<variables>
				<variable name="TASK_VAR1" value="task_value" />
				<variable name="TASK_VAR2" value="task_value_${PA_JOB_ID}"/>
				<variable name="TASK_VAR3" value="task_value_$TASK_VAR1" />
				<variable name="TASK_VAR4" value="task_value_${INHERITED_VAR1}"/>
			</variables>
			<depends>
				<task ref="SuccessTask"/>
			</depends>
			<scriptExecutable>
				<script>
					<code language="javascript">
						<![CDATA[
variables.put("test", "newValue");
variables.put("var3", "propagatedVar3");
variables.put("var4", "propagatedVar4");
]]>
					</code>
				</script>
			</scriptExecutable>
			<cleaning>
				<script>
					<code language="groovy">
						<![CDATA[
            			import org.ow2.proactive.scheduler.task.SchedulerVars
			def writeFile = {
							   path, text ->
							   	def f = new File(path)
							   	f.append("\n"+text)
							}
 			def check_defined_var = {
 			 							name, path ->
 			 								if (variables.get(name) == null)
 			 								{
 			 									writeFile(path,(name + " is not defined"))
 			 								}
 			 						}
			def check_var_equals = {
										name, value, path ->
											if (!value.equals(variables.get(name)))
											{
												writeFile(path,("Variables: " + name + ", EXPECTED: '" + value + "' got '" + variables.get(name) + "'"))
											}
									}
			def check_gi_equals = {
										name, value, path ->
											if (!value.equals(genericInformation.get(name)))
											{
												writeFile(path,("GenericInformation : " + name + " is not equal to " + variables.get(name)))
											}
								  }
			path2=variables.get("path")
			check_defined_var(SchedulerVars.PA_JOB_ID.toString(),path2)
			check_var_equals(SchedulerVars.PA_JOB_NAME.toString(), "Job_cleaning_variables",path2)
			check_defined_var(SchedulerVars.PA_TASK_ID.toString(),path2)
			check_var_equals(SchedulerVars.PA_TASK_NAME.toString(), "ChangeVariableTask",path2)
			check_defined_var(SchedulerVars.PA_TASK_ITERATION.toString(),path2)
			check_defined_var(SchedulerVars.PA_TASK_REPLICATION.toString(),path2)
			check_defined_var(SchedulerVars.PA_USER.toString(),path2)
			check_defined_var(SchedulerVars.PA_SCHEDULER_HOME.toString(),path2)
			check_defined_var(SchedulerVars.PA_NODE_URL.toString(),path2)
			check_defined_var(SchedulerVars.PA_NODE_NAME.toString(),path2)
			check_defined_var(SchedulerVars.PA_NODE_HOST.toString(),path2)
			check_var_equals("test","newValue",path2)

			check_var_equals("WORKFLOW_VAR1", "workflow_value",path2)
			check_var_equals("WORKFLOW_VAR2", "var2_workflow_value",path2)
			check_var_equals("WORKFLOW_VAR3", "workflow_value_" + variables.get("PA_JOB_ID"),path2)
			check_var_equals("WORKFLOW_VAR4", "workflow_value_task_value",path2)

			check_var_equals("TASK_VAR1", "task_value",path2)
			check_var_equals("TASK_VAR2", "task_value_" + variables.get("PA_JOB_ID"),path2)
			check_var_equals("TASK_VAR3", "task_value_task_value",path2)
			check_var_equals("TASK_VAR4", "task_value_inherited_value",path2)

			check_var_equals("INHERITED_VAR1", "inherited_value",path2)
			check_var_equals("INHERITED_VAR2", "inherited_value_" + variables.get("PA_JOB_ID"),path2)
			check_var_equals("INHERITED_VAR3", "inherited_value_task_value",path2)
			check_var_equals("INHERITED_VAR4", "inherited_value_inherited_value",path2)
                    	]]>
					</code>
				</script>
			</cleaning>
		</task>
		<task name="errorTask">
			<description>
				<![CDATA[ The simplest task, ran by a python engine. ]]>
			</description>
			<depends>
				<task ref="ChangeVariableTask"/>
			</depends>
			<scriptExecutable>
				<script>
					<code language="javascript">
						<![CDATA[
variables.put("test", "newNewValue");
a=b;
]]>
					</code>
				</script>
			</scriptExecutable>
			<cleaning>
				<script>
					<code language="groovy">
						<![CDATA[
            			import org.ow2.proactive.scheduler.task.SchedulerVars
		 	def writeFile = {
							   path, text ->
							   	def f = new File(path)
							   	f.append("\n"+text)
							}
 			def check_defined_var = {
 			 							name, path ->
 			 								if (variables.get(name) == null)
 			 								{
 			 									writeFile(path,(name + " is not defined"))
 			 								}
 			 						}
			def check_var_equals = {
										name, value, path ->
											if (!value.equals(variables.get(name)))
											{
											writeFile(path,("Variables: " + name + " is not equal to " + variables.get(name)))
											}
									}
			def check_gi_equals = {
										name, value, path ->
											if (!value.equals(genericInformation.get(name)))
											{
											writeFile(path,("GenericInformation : " + name + " is not equal to " + variables.get(name)))
											}
								  }
			path2=variables.get("path")
			check_defined_var(SchedulerVars.PA_JOB_ID.toString(),path2)
			check_var_equals(SchedulerVars.PA_JOB_NAME.toString(), "Job_cleaning_variables",path2)
			check_defined_var(SchedulerVars.PA_TASK_ID.toString(),path2)
			check_var_equals(SchedulerVars.PA_TASK_NAME.toString(), "errorTask",path2)
			check_defined_var(SchedulerVars.PA_TASK_ITERATION.toString(),path2)
			check_defined_var(SchedulerVars.PA_TASK_REPLICATION.toString(),path2)
			check_defined_var(SchedulerVars.PA_USER.toString(),path2)
			check_defined_var(SchedulerVars.PA_SCHEDULER_HOME.toString(),path2)
			check_defined_var(SchedulerVars.PA_NODE_URL.toString(),path2)
			check_defined_var(SchedulerVars.PA_NODE_NAME.toString(),path2)
			check_defined_var(SchedulerVars.PA_NODE_HOST.toString(),path2)
			check_var_equals("test","newNewValue",path2)
                    	]]>
					</code>
				</script>
			</cleaning>
		</task>
		<task name="inheritedVarsTask">
			<variables>
				<variable name="var1" value="taskVar1" inherited="false" model=""/>
				<variable name="var2" value="taskVar2" inherited="true" model=""/>
				<variable name="var3" value="taskVar3" inherited="false" model=""/>
				<variable name="var4" value="taskVar4" inherited="true" model=""/>
				<variable name="var5" value="taskVar5" inherited="false" model=""/>
				<variable name="var6" value="taskVar6" inherited="true" model=""/>
			</variables>
			<depends>
				<task ref="ChangeVariableTask"/>
			</depends>
			<scriptExecutable>
				<script>
					<code language="javascript">
						<![CDATA[
a=b;
]]>
					</code>
				</script>
			</scriptExecutable>
			<cleaning>
				<script>
					<code language="groovy">
						<![CDATA[
            			import org.ow2.proactive.scheduler.task.SchedulerVars
		 	def writeFile = {
							   path, text ->
							   	def f = new File(path)
							   	f.append("\n"+text)
							}
 			def check_defined_var = {
 			 							name, path ->
 			 								if (variables.get(name) == null)
 			 								{
 			 									writeFile(path,(name + " is not defined"))
 			 								}
 			 						}
			def check_var_equals = {
										name, value, path ->
											if (!value.equals(variables.get(name)))
											{
											writeFile(path,("Variables: " + name + " is not equal to " + variables.get(name)))
											}
									}
			def check_gi_equals = {
										name, value, path ->
											if (!value.equals(genericInformation.get(name)))
											{
											writeFile(path,("GenericInformation : " + name + " is not equal to " + variables.get(name)))
											}
								  }
			path2=variables.get("path")
			check_defined_var(SchedulerVars.PA_JOB_ID.toString(),path2)
			check_var_equals(SchedulerVars.PA_JOB_NAME.toString(), "Job_cleaning_variables",path2)
			check_defined_var(SchedulerVars.PA_TASK_ID.toString(),path2)
			check_var_equals(SchedulerVars.PA_TASK_NAME.toString(), "inheritedVarsTask",path2)
			check_defined_var(SchedulerVars.PA_TASK_ITERATION.toString(),path2)
			check_defined_var(SchedulerVars.PA_TASK_REPLICATION.toString(),path2)
			check_defined_var(SchedulerVars.PA_USER.toString(),path2)
			check_defined_var(SchedulerVars.PA_SCHEDULER_HOME.toString(),path2)
			check_defined_var(SchedulerVars.PA_NODE_URL.toString(),path2)
			check_defined_var(SchedulerVars.PA_NODE_NAME.toString(),path2)
			check_defined_var(SchedulerVars.PA_NODE_HOST.toString(),path2)
			check_var_equals("var1","taskVar1",path2)
			check_var_equals("var2","jobVar2",path2)
			check_var_equals("var3","taskVar3",path2)
			check_var_equals("var4","propagatedVar4",path2)
			check_var_equals("var5","taskVar5",path2)
			check_var_equals("var6","taskVar6",path2)
                    	]]>
					</code>
				</script>
			</cleaning>
		</task>
	</taskFlow>
</job>