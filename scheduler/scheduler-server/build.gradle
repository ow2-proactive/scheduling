repositories {
    if (project.hasProperty('local')) mavenLocal()

    maven {
        url "http://repository.activeeon.com/content/groups/proactive/"
    }
}

apply plugin: 'java-library-distribution'

dependencies {
    compile 'commons-cli:commons-cli:1.3.1'
    compile 'commons-io:commons-io:2.5'
    compile 'javax.mail:mail:1.4.7'
    compile 'joda-time:joda-time:2.9.1'
    compile 'org.apache.commons:commons-lang3:3.4'

    compile "org.ow2.proactive:emailnotification-addons:${schedulingVersion}"

    compile 'org.eclipse.jetty:jetty-webapp:9.2.14.v20151106'
    compile "org.objectweb.proactive:programming-core:${programmingVersion}"

    compile project(':common:common-api')
    compile project(':common:common-client')
    compile project(':common:common-db')
    compile project(':common:common-http')
    compile project(':scheduler:scheduler-api')
    compile project(':scheduler:scheduler-client')
    compile project(':scheduler:scheduler-node')
    compile project(':rm:rm-server')
    compile project(':rm:rm-client')




    testCompile "com.google.jimfs:jimfs:1.1"
    testCompile "org.objectweb.proactive:programming-extension-pnp:${programmingVersion}"
    testCompile "org.objectweb.proactive:programming-extension-pnpssl:${programmingVersion}"
    testCompile 'org.mockito:mockito-core:1.10.19'
    testCompile 'org.hamcrest:hamcrest-all:1.3'
    testCompile 'org.apache.jmeter:ApacheJMeter_junit:3.3'
    testCompile 'org.apache.jmeter:ApacheJMeter_java:3.3'

    testCompile 'org.codehaus.groovy:groovy-all:2.4.12'

    testCompile 'org.jvnet.winp:winp:1.24'
    testCompile files("${System.properties['java.home']}/../lib/tools.jar")

    testCompile project(':rm:rm-server').sourceSets.test.output // to get shared test classes
    testCompile project(':common:common-api').sourceSets.test.output
    testCompile project(':rm:rm-policy:rm-policy-scheduler')
    testCompile project(':scheduler:scheduler-examples')

    runtime 'org.hsqldb:hsqldb:2.4.0'

    runtime "org.objectweb.proactive:programming-extension-pnp:${programmingVersion}"
    runtime "org.objectweb.proactive:programming-extension-pnpssl:${programmingVersion}"
    runtime "org.objectweb.proactive:programming-extension-pamr:${programmingVersion}"

    runtime project(':rest:rest-server')
}

task('functionalTest', type: Test).configure schedulingFunctionalTestConfiguration

/**
 * The whole idea is to have peformancetests/* tests which are run by JMeter.
 * Run performanceTest task:
 * it creates junit-performance-tests.jar with performance tests and all our project,
 * then it runs jmRun task of jmeter-gradle-plugin.
 * Which takes our prepared plan myverytest.jmx (where is specified which tests to launch).
 * So JMeter executes tests specified in myverytest.jmx and provided in junit-performance-tests.jar
 * So final report stored â€¦ and goes to Jenkins
 */
apply plugin: "net.foragerr.jmeter"

/**
 * Prepares jar with tests to be run in JMeter.
 */
task performanceTestJar(type: Jar) {
    archiveName = 'junit-performance-tests.jar'

    destinationDir = file("${buildDir}/resources/jars")

    from sourceSets.main.output
    from sourceSets.test.output
    from rootProject.configurations.runtime.allArtifacts.files
    from rootProject.configurations.runtime
    from configurations.runtime.allArtifacts.files
    from configurations.runtime
    doLast {
        copy {
            from configurations.runtime
            from configurations.testCompile
            into "${buildDir}/resources/jars/"
        }
        file("${buildDir}/jmeter/bin").mkdirs()
        copy {
            from "./src/test/resources/config/log4j.conf"
            into "${buildDir}/jmeter/bin/"
        }
    }
}

/**
 * Task which should be called to execute performance tests.
 * It configures jmeter-gradle-plugin and it is followed by jmRun (plugin task to run all tests)
 */
task performanceTestRun {
    dependsOn performanceTestJar

    jmeter {
        jmTestFiles = [file("src/test/resources/jmeter/performance-java-plan.jmx")]
        // specifies where to search for jar
        jmUserProperties = ["user.classpath=${buildDir}/resources/jars"]
        // plan which should be executed by JMeter
        jmLog = file("src/test/resources/jmeter/jmeter.log") // file path to log
        enableReports = true
        enableExtendedReports = false
    }

    /**
     * in order to run tests it is necessary to run jmRun task of jmeter-gradle-plugin
     */
    finalizedBy jmRun
}

task performanceTest {
    dependsOn performanceTestRun
    finalizedBy jmReport
}


task testJar(type: Jar) {
    classifier = 'tests'
    from sourceSets.test.output
}


task stub(type: StubTask) {
    classes = [
            'org.ow2.proactive.scheduler.authentication.SchedulerAuthentication',
            'org.ow2.proactive.scheduler.core.rmproxies.RMProxyActiveObject',
            'org.ow2.proactive.scheduler.core.SchedulerFrontend',
            'org.ow2.proactive.scheduler.core.TerminateNotification'
    ]
}
serialver.dependsOn stub

rootProject.dist.dependsOn testJar

task dist(type: Copy) {
    from testJar
    into file("$rootDir/dist/lib")
}

dist.dependsOn project(':rm:rm-server').dist

artifacts {
    archives testJar
}

functionalTest.dependsOn rootProject.dist, dist
clean.dependsOn rootProject.cleanDist
