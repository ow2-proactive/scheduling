/*
 * ProActive Parallel Suite(TM):
 * The Open Source library for parallel and distributed
 * Workflows & Scheduling, Orchestration, Cloud Automation
 * and Big Data Analysis on Enterprise Grids & Clouds.
 *
 * Copyright (c) 2007 - 2017 ActiveEon
 * Contact: contact@activeeon.com
 *
 * This library is free software: you can redistribute it and/or
 * modify it under the terms of the GNU Affero General Public License
 * as published by the Free Software Foundation: version 3 of
 * the License.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU Affero General Public License for more details.
 *
 * You should have received a copy of the GNU Affero General Public License
 * along with this program. If not, see <http://www.gnu.org/licenses/>.
 *
 * If needed, contact us to obtain a release under GPL Version 2 or 3
 * or a different license than the AGPL.
 */
package org.ow2.proactive.authentication.keycloak;

import java.io.FileInputStream;
import java.io.IOException;
import java.util.Properties;

import org.keycloak.adapters.KeycloakDeployment;
import org.keycloak.adapters.KeycloakDeploymentBuilder;
import org.keycloak.protocol.oidc.client.authentication.ClientIdAndSecretCredentialsProvider;
import org.keycloak.representations.adapters.config.AdapterConfig;
import org.objectweb.proactive.annotation.PublicAPI;
import org.ow2.proactive.core.properties.PropertyDecrypter;


/**
 * KeycloakOidcProperties contains all Keycloak configuration properties.
 * You must use provided methods in order to get these properties.
 */
@PublicAPI
public class KeycloakOidcProperties {

    /* ***************************************************************** */
    /* ************************** Keycloak PROPERTIES ****************** */
    /* ***************************************************************** */

    /** URL of a Keycloak server configured for ProActive authentication */
    public static final String KEYCLOAK_URL = "keycloak.url";

    /** When Keycloak URL uses the HTTPS protocol, this parameter indicates which kind of TLS certificate to consider for the Keycloak server.
     * True means that any certificate can be used including the self-signed ones.
     * False means that only valid certificates generated by Trusted Certification Authorities are allowed.
     * */
    public static final String ALLOW_ANY_CERTIFICATE = "keycloak.https.allow_any_certificate";

    /** Keycloak realm in which ProActive client is configured */
    public static final String KEYCLOAK_REALM = "keycloak.realm";

    /** Keycloak ProActive client ID */
    public static final String KEYCLOAK_PROACTIVE_CLIENT_ID = "keycloak.proactive.client_id";

    /** Keycloak ProActive client ID */
    public static final String KEYCLOAK_PROACTIVE_CLIENT_SECRET = "keycloak.proactive.client_secret";

    /** Scope of the information to be returned by Keycloak for the ProActive client.
     * An empty value considers the scopes defined for ProActive client in Keycloak.
     */
    public static final String KEYCLOAK_PROACTIVE_SCOPE = "keycloak.proactive.scope";

    /**  Keycloak RSA public key used to decrypt the access tokens */
    public static final String KEYCLOAK_PUBLIC_KEY = "keycloak.public.key";

    /**  The attribute in Keycloak access token to be used to extract the user/principal name */
    public static final String KEYCLOAK_PRINCIPAL_ATTRIBUTE = "keycloak.principal_attribute";

    /**  Use the resource_access roles in Keycloak access token to extract the user/principal roles
     * true or false */
    public static final String KEYCLOAK_USE_RESOURCE_ROLE_MAPPINGS = "keycloak.use_resource_role_mappings";

    /** Fall back property, check user/password and group in files if user is not found in Keycloak.
     * true or false */
    public static final String FALLBACK_USER_AUTH = "pa.keycloak.authentication.fallback";

    /** group fall back property, check user group membership group file if user is not found in corresponding Keycloak group.
     * true or false */
    public static final String FALLBACK_GROUP_MEMBERSHIP = "pa.keycloak.group.membership.fallback";

    /** tenant fall back property, check user tenant membership tenant file if user is not found in LDAP or if tenant Keycloak attribute is not defined.
     * true or false */
    public static final String FALLBACK_TENANT_MEMBERSHIP = "pa.keycloak.tenant.membership.fallback";

    /* ***************************************************************************** */
    /* ***************************************************************************** */
    /** memory entity of the properties file. */
    private final Properties prop;

    private static KeycloakDeployment keycloakDeployment;

    /**
     * Creates a new instance of KeycloakProperties
     *
     * @param propertiesFileName properties file name
     */
    public KeycloakOidcProperties(String propertiesFileName) {
        prop = PropertyDecrypter.getDecryptableProperties();
        try (FileInputStream stream = new FileInputStream(propertiesFileName)) {
            prop.load(stream);
            setUserJavaProperties();

        } catch (IOException e) {
            throw new RuntimeException(e);
        }

        keycloakDeployment = buildKeycloakDeployment();
    }

    /**
     * Sets the user java properties to the KeycloakProperties.<br/>
     * User properties are defined using the -Dname=value in the java command.
     */
    private void setUserJavaProperties() {
        for (Object o : prop.keySet()) {
            String s = System.getProperty((String) o);
            if (s != null) {
                prop.setProperty((String) o, s);
            }
        }
    }

    /**
     * Retrieves the value of the property
     *
     * @param key property name
     * @return property value
     */
    public String getProperty(String key) {
        return prop.getProperty(key);
    }

    /**
     * Returns whether to use the Fallback mechanism for user authentication
     *
     * @return whether to use the Fallback mechanism for user authentication
     */
    public boolean isFallbackUserAuth() {
        return Boolean.parseBoolean(getProperty(FALLBACK_USER_AUTH));
    }

    /**
     * Returns whether to use the Fallback mechanism to determine the user group
     *
     * @return whether to use the Fallback mechanism to determine the user group
     */
    public boolean isFallbackGroupMembership() {
        return Boolean.parseBoolean(getProperty(FALLBACK_GROUP_MEMBERSHIP));
    }

    /**
     * Returns whether to use the Fallback mechanism to determine the user tenant
     *
     * @return whether to use the Fallback mechanism to determine the user tenant
     */
    public boolean isFallbackTenantMembership() {
        return Boolean.parseBoolean(getProperty(FALLBACK_TENANT_MEMBERSHIP));
    }

    /**
     * Returns the Keycloak deployment configuration
     *
     * @return KeycloakDeployment Keycloak deployment configuration
     */
    public KeycloakDeployment getKeycloakDeployment() {
        return keycloakDeployment;
    }

    /**
     * Builds the Keycloak deployment configuration based on the Keycloak configuration file
     *
     * @return KeycloakDeployment Keycloak deployment configuration
     */
    private KeycloakDeployment buildKeycloakDeployment() {

        AdapterConfig config = new AdapterConfig();

        config.setAuthServerUrl(getProperty(KEYCLOAK_URL));
        config.setAllowAnyHostname(Boolean.parseBoolean(getProperty(ALLOW_ANY_CERTIFICATE)));
        config.setRealm(getProperty(KEYCLOAK_REALM));
        config.setPrincipalAttribute(getProperty(KEYCLOAK_PRINCIPAL_ATTRIBUTE));
        config.setUseResourceRoleMappings(Boolean.parseBoolean(getProperty(KEYCLOAK_USE_RESOURCE_ROLE_MAPPINGS)));
        config.setResource(getProperty(KEYCLOAK_PROACTIVE_CLIENT_ID));
        ClientIdAndSecretCredentialsProvider credentialsProvider = new ClientIdAndSecretCredentialsProvider();
        credentialsProvider.init(config, getProperty(KEYCLOAK_PROACTIVE_CLIENT_SECRET));
        config.setRealmKey(getProperty(KEYCLOAK_PUBLIC_KEY));

        return KeycloakDeploymentBuilder.build(config);
    }
}
