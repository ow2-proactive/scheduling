apply plugin: 'miredot'

miredot {
    source = sourceSets.main.allJava
    destination = sourceSets.main.output
    output {
        formats {
            'html' {
                initialCollapseLevel = 2
            }
        }
        title = 'ProActive Workflows & Scheduling - REST API v' + version
    }
    // expires Sunday 1 july  2018
    licence = 'cHJvamVjdHxvcmcub3cyLnByb2FjdGl2ZV9ncmlkX2Nsb3VkX3BvcnRhbC5yZXN0LXNlcnZlcnwyMDE4LTA3LTAxfHRydWV8LTEjTUN3Q0ZFaEgyZWJGOHJqWXY3dG4vazNrdEx4NjcyK3RBaFFlNVVtVC9VL29kZ0RFRTBmY3dwUnVWV3dZY3c9PQ=='
    restModel{
        restFramework {
            name = 'jax-rs'
        }
        titleNamingStrategies = [
                'tag: summary',
                'tag: title',
                'firstsentence'
        ]
    }
}

dependencies {
    compile 'org.jboss.resteasy:resteasy-jackson-provider:3.0.17.Final'
    compile 'org.jboss.resteasy:resteasy-multipart-provider:3.0.17.Final'

    compile 'org.rrd4j:rrd4j:2.2.1'
    compile 'net.sf.dozer:dozer:5.5.1'
    compile 'commons-io:commons-io:2.5'
    compile 'commons-codec:commons-codec:1.10'

    compile 'com.netiq:websockify:1.7-proactive'
    compile 'io.netty:netty:3.10.6.Final'

    compile 'org.atmosphere:atmosphere-runtime:2.3.4'

    compile project(":scheduler:scheduler-client")
    compile project(":rm:rm-client")
    compile "org.objectweb.proactive:programming-extension-pnp:${programmingVersion}"
    compile "org.objectweb.proactive:programming-extension-pnpssl:${programmingVersion}"
    compile "org.objectweb.proactive:programming-extension-dataspaces:${programmingVersion}"

    compile project(':rest:rest-api')
    compile project(':common:common-http')

    testCompile functionalTestDependencies

    testCompile 'org.apache.httpcomponents:httpmime:4.5.2'
    testCompile 'org.jboss.resteasy:tjws:3.0.13.Final'

    testCompile 'org.mockito:mockito-core:1.10.19'
    testCompile 'org.eclipse.jetty:jetty-client:9.2.14.v20151106'
    testCompile 'org.zeroturnaround:zt-zip:1.9'

    testCompile project (':common:common-api').sourceSets.test.output

    runtime 'org.eclipse.jetty.websocket:websocket-server:9.2.14.v20151106'
    runtime 'org.eclipse.jetty:jetty-webapp:9.2.14.v20151106'

    runtime "org.objectweb.proactive:programming-extension-pamr:${programmingVersion}"
}

task stub(type: StubTask) {
    classes = ['org.ow2.proactive_grid_cloud_portal.scheduler.EventListener']
}

test {
    exclude 'functionaltests/**'
}

task('functionalTest', type: Test).configure functionalTestConfiguration

functionalTest.dependsOn rootProject.dist
clean.dependsOn rootProject.cleanDist

task proActiveWar(type: Sync, dependsOn: [classes, stub, tasks.miredot]) {
    from "src/main/webapp"

    def schedulerNodeJar = project(":scheduler:scheduler-node").standaloneJar
    from schedulerNodeJar

    into file("$rootDir/dist/war/rest")

    rename(schedulerNodeJar.outputs.files.singleFile.name, 'node.jar')

    filesMatching('**/*.html') {
        it.filter(org.apache.tools.ant.filters.ReplaceTokens, tokens: ['rest_api.version': project.version])
    }
}

task copyMiredotDoc(type: Copy) {
    from "${buildDir}/miredot"
    into "$rootDir/dist/war/rest/doc"
}

proActiveWar.finalizedBy(copyMiredotDoc)

clean.dependsOn cleanProActiveWar

rootProject.dist.dependsOn project.proActiveWar

artifacts {
    jar
}
