apply plugin: 'ear'

def rmFolder = new File('dist/war/rm')
def schedulerFolder = new File('dist/war/scheduler')
def studioFolder = new File('dist/war/studio')
def workflowCatalogFolder = new File('dist/war/workflow-catalog')
def schedulingAPIFolder = new File('dist/war/scheduling-api')

configurations.compile.transitive = true

configurations {
    all*.exclude group: 'com.zaxxer', module: 'HikariCP-java6'
}

//**************************************Generating the getstarted war archive**********************************
task getStartedWarTask(type: War) {
    from project(':').files('dist/war/getstarted', '*')
    archiveName "proactive-getstarted.war"
}
//*************************************************************************************************************


//**************************************Generating the rest war archive****************************************
task restWarTask(type: War) {

    from (project(':').files('dist/war/rest', '*')){
        exclude '**/WEB-INF/web.xml'
    }

    webInf { from 'src/main/proactive-ear/modules-deployment-descriptors/rest' }

    doFirst {
        manifest {
            attributes 'Implementation-Title': 'Proactive REST-API Web App',
                    'Implementation-Version': "${schedulingVersion}",
                    'Class-Path': configurations.earlib.collect() { if (it.getName().endsWith('.jar')) return ('lib/'.concat(it.getName())) else return ''}.join(' ')
        }
    }

    archiveName "proactive-rest.war"
}
//***********************************************************************************************************


//**************************************Generating the rm war archive****************************************
task rmWarTask(type: War) {

    if( rmFolder.exists() ) {
        from(project(':').files(rmFolder, '*')) {
            exclude '**/WEB-INF/web.xml'
            exclude 'rm.conf'
        }

        from 'src/main/proactive-portals-ear/modules-deployment-descriptors/rm/rm.conf'

        webInf {
            from 'src/main/proactive-portals-ear/modules-deployment-descriptors/rm/WEB-INF'
        }

        archiveName "proactive-rm.war"
    }
}
//********************************************************************************************************


//**************************************Generating the scheduler war archive******************************
task schedulerWarTask(type: War) {

    if( schedulerFolder.exists() ) {
        from(project(':').files(schedulerFolder, '*')) {
            exclude '**/WEB-INF/web.xml'
            exclude 'scheduler.conf'
        }

        from 'src/main/proactive-portals-ear/modules-deployment-descriptors/scheduler/scheduler.conf'

        webInf {
            from 'src/main/ibm-deployment-descriptors/scheduler/WEB-INF'
        }

        archiveName "proactive-scheduler.war"
    }
}
//********************************************************************************************************


//**************************************Generating the studio war archive*********************************
task studioWarTask(type: War) {

    if( studioFolder.exists() ) {
        from project(':').files(studioFolder, '*')
        archiveName "proactive-studio.war"
    }
}
//********************************************************************************************************


//**************************************Generating the workflow-catalog war archive************************
task workflowCatalogWarTask(type: War) {

    if( workflowCatalogFolder.exists() ) {

        from  (project(':').files(workflowCatalogFolder, '*')){
            exclude '**/WEB-INF/web.xml'
        }

        webInf {
            from 'src/main/proactive-portals-ear/modules-deployment-descriptors/workflow-catalog'
        }

        archiveName "proactive-workflow-catalog.war"
    }
}
//********************************************************************************************************


//**************************************Generating the scheduling-api war archive************************
task schedulingAPIWarTask(type: War) {

    if( schedulingAPIFolder.exists() ) {

        from (project(':').files(schedulingAPIFolder, '*')){
            exclude '**/WEB-INF/web.xml'
        }

        webInf {
            from 'src/main/proactive-portals-ear/modules-deployment-descriptors/scheduling-api'
        }

        archiveName "proactive-scheduling-api.war"
    }
}
//********************************************************************************************************


task Scheduler_RM_Portals_EAR(type: Ear){

    if( schedulerFolder.exists() && schedulingAPIFolder.exists() &&  rmFolder.exists()  ) {

        from 'src/main/proactive-scheduler-rm-portals/app-deployment-descriptors'

        from rmWarTask.archivePath
        from schedulerWarTask.archivePath
        from schedulingAPIWarTask.archivePath

        deploymentDescriptor {
            archiveName "proactive-scheduler-rm-portals-${schedulingVersion}.ear"
        }
    }
}

task Studio_Workflow_Catalog_EAR(type: Ear) {

    if (studioFolder.exists() && workflowCatalogFolder.exists()) {

        from 'src/main/proactive-studio-workflow-catalog/app-deployment-descriptors'

        from studioWarTask.archivePath
        from workflowCatalogWarTask.archivePath

        deploymentDescriptor {
            archiveName "proactive-studio-workflow-catalog-${schedulingVersion}.ear"
        }
    }
}

//Scheduler_RM_Portals_EAR.dependsOn rmWarTask, schedulerWarTask, schedulingAPIWarTask

//Studio_Workflow_Catalog_EAR.dependsOn  studioWarTask, workflowCatalogWarTask

ear.dependsOn getStartedWarTask, restWarTask//, Scheduler_RM_Portals_EAR, Studio_Workflow_Catalog_EAR

ear{

    appDirName 'src/main/proactive/app-deployment-descriptors'

    libDirName 'lib/'

    dependencies {

        earlib project(':scheduler:scheduler-server')
        earlib group: 'com.zaxxer', name: 'HikariCP', version: '2.6.0'

        deploy project(path: ':war-wrapper', configuration: 'archives')

        deploy files(getStartedWarTask)
        deploy files(restWarTask)

    }

    deploymentDescriptor {
        archiveName "proactive-${schedulingVersion}.ear"
    }

}
